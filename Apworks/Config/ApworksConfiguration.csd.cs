//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration section for Apworks framework.
    /// </summary>
    public partial class ApworksConfigSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Apworks.Config.ApworksConfigSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Application Property
        /// <summary>
        /// The XML name of the <see cref="Application"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ApplicationPropertyName = "application";
        
        /// <summary>
        /// Gets or sets the configuration for the Apworks application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the Apworks application.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.ApplicationPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.ApplicationElement Application
        {
            get
            {
                return ((global::Apworks.Config.ApplicationElement)(base[global::Apworks.Config.ApworksConfigSection.ApplicationPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.ApplicationPropertyName] = value;
            }
        }
        #endregion
        
        #region ObjectContainer Property
        /// <summary>
        /// The XML name of the <see cref="ObjectContainer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ObjectContainerPropertyName = "objectContainer";
        
        /// <summary>
        /// Gets or sets the configuration for the object container.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the object container.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.ObjectContainerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.ObjectContainerElement ObjectContainer
        {
            get
            {
                return ((global::Apworks.Config.ObjectContainerElement)(base[global::Apworks.Config.ApworksConfigSection.ObjectContainerPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.ObjectContainerPropertyName] = value;
            }
        }
        #endregion
        
        #region Serializers Property
        /// <summary>
        /// The XML name of the <see cref="Serializers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SerializersPropertyName = "serializers";
        
        /// <summary>
        /// Gets or sets the configuration for serializers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for serializers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.SerializersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.SerializerElement Serializers
        {
            get
            {
                return ((global::Apworks.Config.SerializerElement)(base[global::Apworks.Config.ApworksConfigSection.SerializersPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.SerializersPropertyName] = value;
            }
        }
        #endregion
        
        #region Generators Property
        /// <summary>
        /// The XML name of the <see cref="Generators"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string GeneratorsPropertyName = "generators";
        
        /// <summary>
        /// Gets or sets the configuration for identity and sequential generators.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for identity and sequential generators.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.GeneratorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.GeneratorElement Generators
        {
            get
            {
                return ((global::Apworks.Config.GeneratorElement)(base[global::Apworks.Config.ApworksConfigSection.GeneratorsPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.GeneratorsPropertyName] = value;
            }
        }
        #endregion
        
        #region Handlers Property
        /// <summary>
        /// The XML name of the <see cref="Handlers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HandlersPropertyName = "handlers";
        
        /// <summary>
        /// Gets or sets the configuration for command or event handlers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for command or event handlers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.HandlersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.HandlerElementCollection Handlers
        {
            get
            {
                return ((global::Apworks.Config.HandlerElementCollection)(base[global::Apworks.Config.ApworksConfigSection.HandlersPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.HandlersPropertyName] = value;
            }
        }
        #endregion
        
        #region Exceptions Property
        /// <summary>
        /// The XML name of the <see cref="Exceptions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExceptionsPropertyName = "exceptions";
        
        /// <summary>
        /// Gets or sets the configuration for exception handling logic within Apworks framework.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for exception handling logic within Apworks framework.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.ExceptionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.ExceptionElementCollection Exceptions
        {
            get
            {
                return ((global::Apworks.Config.ExceptionElementCollection)(base[global::Apworks.Config.ApworksConfigSection.ExceptionsPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.ExceptionsPropertyName] = value;
            }
        }
        #endregion
        
        #region Interception Property
        /// <summary>
        /// The XML name of the <see cref="Interception"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptionPropertyName = "interception";
        
        /// <summary>
        /// Gets or sets the configuration for the interceptions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the interceptions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApworksConfigSection.InterceptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.InterceptionElement Interception
        {
            get
            {
                return ((global::Apworks.Config.InterceptionElement)(base[global::Apworks.Config.ApworksConfigSection.InterceptionPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApworksConfigSection.InterceptionPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// The application element
    /// </summary>
    public partial class ApplicationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the provider type of the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The provider type of the application.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ApplicationElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Apworks.Config.ApplicationElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ApplicationElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// The object container element.
    /// </summary>
    public partial class ObjectContainerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the provider type of the object container.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The provider type of the object container.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ObjectContainerElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Apworks.Config.ObjectContainerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ObjectContainerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region InitFromConfigFile Property
        /// <summary>
        /// The XML name of the <see cref="InitFromConfigFile"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InitFromConfigFilePropertyName = "initFromConfigFile";
        
        /// <summary>
        /// Gets or sets the boolean value which indicates whether the object container configuration should be initialized from the app/web.config file.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The boolean value which indicates whether the object container configuration shou" +
            "ld be initialized from the app/web.config file.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ObjectContainerElement.InitFromConfigFilePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool InitFromConfigFile
        {
            get
            {
                return ((bool)(base[global::Apworks.Config.ObjectContainerElement.InitFromConfigFilePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ObjectContainerElement.InitFromConfigFilePropertyName] = value;
            }
        }
        #endregion
        
        #region SectionName Property
        /// <summary>
        /// The XML name of the <see cref="SectionName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SectionNamePropertyName = "sectionName";
        
        /// <summary>
        /// Gets or sets the name of the configuration section which would be used by the object container if it is designed to be initialized from the app/web.config file.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the configuration section which would be used by the object container" +
            " if it is designed to be initialized from the app/web.config file.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ObjectContainerElement.SectionNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SectionName
        {
            get
            {
                return ((string)(base[global::Apworks.Config.ObjectContainerElement.SectionNamePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ObjectContainerElement.SectionNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for the event serializer.
    /// </summary>
    public partial class EventSerializerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the provider type of the event serializer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The provider type of the event serializer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.EventSerializerElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Apworks.Config.EventSerializerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.EventSerializerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for the snapshot serializer.
    /// </summary>
    public partial class SnapshotSerializerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the provider type of the snapshot serializer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The provider type of the snapshot serializer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.SnapshotSerializerElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Apworks.Config.SnapshotSerializerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.SnapshotSerializerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for either event or snapshot serializers.
    /// </summary>
    public partial class SerializerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region EventSerializer Property
        /// <summary>
        /// The XML name of the <see cref="EventSerializer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EventSerializerPropertyName = "eventSerializer";
        
        /// <summary>
        /// Gets or sets the configuration for the event serializer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the event serializer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.SerializerElement.EventSerializerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.EventSerializerElement EventSerializer
        {
            get
            {
                return ((global::Apworks.Config.EventSerializerElement)(base[global::Apworks.Config.SerializerElement.EventSerializerPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.SerializerElement.EventSerializerPropertyName] = value;
            }
        }
        #endregion
        
        #region SnapshotSerializer Property
        /// <summary>
        /// The XML name of the <see cref="SnapshotSerializer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SnapshotSerializerPropertyName = "snapshotSerializer";
        
        /// <summary>
        /// Gets or sets the configuration for the snapshot serializer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the snapshot serializer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.SerializerElement.SnapshotSerializerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.SnapshotSerializerElement SnapshotSerializer
        {
            get
            {
                return ((global::Apworks.Config.SnapshotSerializerElement)(base[global::Apworks.Config.SerializerElement.SnapshotSerializerPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.SerializerElement.SnapshotSerializerPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for the sequential generator.
    /// </summary>
    public partial class SequenceGeneratorElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the type of sequence generator.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of sequence generator.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.SequenceGeneratorElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Apworks.Config.SequenceGeneratorElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.SequenceGeneratorElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for the identity generator.
    /// </summary>
    public partial class IdentityGeneratorElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the type of identity generator.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of identity generator.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.IdentityGeneratorElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Apworks.Config.IdentityGeneratorElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.IdentityGeneratorElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// The Generator element which contains the configuration for either sequential or identity generators.
    /// </summary>
    public partial class GeneratorElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SequenceGenerator Property
        /// <summary>
        /// The XML name of the <see cref="SequenceGenerator"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SequenceGeneratorPropertyName = "sequenceGenerator";
        
        /// <summary>
        /// Gets or sets the configuration for the sequence generator.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the sequence generator.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.GeneratorElement.SequenceGeneratorPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.SequenceGeneratorElement SequenceGenerator
        {
            get
            {
                return ((global::Apworks.Config.SequenceGeneratorElement)(base[global::Apworks.Config.GeneratorElement.SequenceGeneratorPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.GeneratorElement.SequenceGeneratorPropertyName] = value;
            }
        }
        #endregion
        
        #region IdentityGenerator Property
        /// <summary>
        /// The XML name of the <see cref="IdentityGenerator"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdentityGeneratorPropertyName = "identityGenerator";
        
        /// <summary>
        /// Gets or sets the configuration for the identity generator.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The configuration for the identity generator.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.GeneratorElement.IdentityGeneratorPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.IdentityGeneratorElement IdentityGenerator
        {
            get
            {
                return ((global::Apworks.Config.IdentityGeneratorElement)(base[global::Apworks.Config.GeneratorElement.IdentityGeneratorPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.GeneratorElement.IdentityGeneratorPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for message handlers.
    /// </summary>
    public partial class HandlerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Kind Property
        /// <summary>
        /// The XML name of the <see cref="Kind"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string KindPropertyName = "kind";
        
        /// <summary>
        /// Gets or sets the kind of the handler, can be either Command or Event.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The kind of the handler, can be either Command or Event.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.HandlerElement.KindPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.HandlerKind Kind
        {
            get
            {
                return ((global::Apworks.Config.HandlerKind)(base[global::Apworks.Config.HandlerElement.KindPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.HandlerElement.KindPropertyName] = value;
            }
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of the handler.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the handler.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.HandlerElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Apworks.Config.HandlerElement.NamePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.HandlerElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region SourceType Property
        /// <summary>
        /// The XML name of the <see cref="SourceType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SourceTypePropertyName = "sourceType";
        
        /// <summary>
        /// Gets or sets the source type, can be either Assembly or Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The source type, can be either Assembly or Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.HandlerElement.SourceTypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.HandlerSourceType SourceType
        {
            get
            {
                return ((global::Apworks.Config.HandlerSourceType)(base[global::Apworks.Config.HandlerElement.SourceTypePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.HandlerElement.SourceTypePropertyName] = value;
            }
        }
        #endregion
        
        #region Source Property
        /// <summary>
        /// The XML name of the <see cref="Source"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SourcePropertyName = "source";
        
        /// <summary>
        /// Gets or sets the name of the source, which could be either the assembly name, when SourceType is Assembly, or the type name, when SourceType is Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the source, which could be either the assembly name, when SourceType " +
            "is Assembly, or the type name, when SourceType is Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.HandlerElement.SourcePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Source
        {
            get
            {
                return ((string)(base[global::Apworks.Config.HandlerElement.SourcePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.HandlerElement.SourcePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration collection which contains a set of configuration for message handlers.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.HandlerElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::Apworks.Config.HandlerElementCollection.HandlerElementPropertyName)]
    public partial class HandlerElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.HandlerElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HandlerElementPropertyName = "handler";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.HandlerElementCollection.HandlerElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.HandlerElementCollection.HandlerElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.HandlerElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.HandlerElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.HandlerElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.HandlerElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.HandlerElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.HandlerElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.HandlerElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.HandlerElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Apworks.Config.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.HandlerElement this[object name]
        {
            get
            {
                return ((global::Apworks.Config.HandlerElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.HandlerElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="handler">The <see cref="global::Apworks.Config.HandlerElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.HandlerElement handler)
        {
            base.BaseAdd(handler);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.HandlerElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="handler">The <see cref="global::Apworks.Config.HandlerElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.HandlerElement handler)
        {
            base.BaseRemove(this.GetElementKey(handler));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.HandlerElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.HandlerElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.HandlerElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.HandlerElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Apworks.Config.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.HandlerElement GetItemByKey(string name)
        {
            return ((global::Apworks.Config.HandlerElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for exception handlers.
    /// </summary>
    public partial class ExceptionHandlerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the type of the exception handler.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of the exception handler.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ExceptionHandlerElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Apworks.Config.ExceptionHandlerElement.TypePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ExceptionHandlerElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration collection which contains a set of configuration for the exception handlers.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.ExceptionHandlerElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::Apworks.Config.ExceptionHandlerElementCollection.ExceptionHandlerElementPropertyName)]
    public partial class ExceptionHandlerElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.ExceptionHandlerElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExceptionHandlerElementPropertyName = "handler";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.ExceptionHandlerElementCollection.ExceptionHandlerElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.ExceptionHandlerElementCollection.ExceptionHandlerElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.ExceptionHandlerElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.ExceptionHandlerElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.ExceptionHandlerElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.ExceptionHandlerElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionHandlerElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.ExceptionHandlerElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionHandlerElement this[object type]
        {
            get
            {
                return ((global::Apworks.Config.ExceptionHandlerElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="handler">The <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.ExceptionHandlerElement handler)
        {
            base.BaseAdd(handler);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.ExceptionHandlerElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="handler">The <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.ExceptionHandlerElement handler)
        {
            base.BaseRemove(this.GetElementKey(handler));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionHandlerElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.ExceptionHandlerElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::Apworks.Config.ExceptionHandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionHandlerElement GetItemByKey(string type)
        {
            return ((global::Apworks.Config.ExceptionHandlerElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for exception handling.
    /// </summary>
    public partial class ExceptionElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the type of the exception.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of the exception.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ExceptionElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Apworks.Config.ExceptionElement.TypePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ExceptionElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Behavior Property
        /// <summary>
        /// The XML name of the <see cref="Behavior"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BehaviorPropertyName = "behavior";
        
        /// <summary>
        /// Gets or sets the behavior of the exception handling.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The behavior of the exception handling.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ExceptionElement.BehaviorPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.ExceptionHandlingBehavior Behavior
        {
            get
            {
                return ((global::Apworks.Config.ExceptionHandlingBehavior)(base[global::Apworks.Config.ExceptionElement.BehaviorPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ExceptionElement.BehaviorPropertyName] = value;
            }
        }
        #endregion
        
        #region Handlers Property
        /// <summary>
        /// The XML name of the <see cref="Handlers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HandlersPropertyName = "handlers";
        
        /// <summary>
        /// Gets or sets the Handlers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Handlers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.ExceptionElement.HandlersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.ExceptionHandlerElementCollection Handlers
        {
            get
            {
                return ((global::Apworks.Config.ExceptionHandlerElementCollection)(base[global::Apworks.Config.ExceptionElement.HandlersPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.ExceptionElement.HandlersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration collection which contains a set of configuration for exception handling.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.ExceptionElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::Apworks.Config.ExceptionElementCollection.ExceptionElementPropertyName)]
    public partial class ExceptionElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.ExceptionElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExceptionElementPropertyName = "exception";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.ExceptionElementCollection.ExceptionElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.ExceptionElementCollection.ExceptionElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.ExceptionElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.ExceptionElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.ExceptionElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.ExceptionElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.ExceptionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.ExceptionElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::Apworks.Config.ExceptionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionElement this[object type]
        {
            get
            {
                return ((global::Apworks.Config.ExceptionElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.ExceptionElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="exception">The <see cref="global::Apworks.Config.ExceptionElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.ExceptionElement exception)
        {
            base.BaseAdd(exception);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.ExceptionElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="exception">The <see cref="global::Apworks.Config.ExceptionElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.ExceptionElement exception)
        {
            base.BaseRemove(this.GetElementKey(exception));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.ExceptionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.ExceptionElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.ExceptionElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::Apworks.Config.ExceptionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.ExceptionElement GetItemByKey(string type)
        {
            return ((global::Apworks.Config.ExceptionElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for interceptor ref.
    /// </summary>
    public partial class InterceptorRefElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptorRefElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Apworks.Config.InterceptorRefElement.NamePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptorRefElement.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// The InterceptorElement Configuration Element.
    /// </summary>
    public partial class InterceptorElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptorElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Apworks.Config.InterceptorElement.NamePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptorElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptorElement.TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Apworks.Config.InterceptorElement.TypePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptorElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// A collection of InterceptorElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.InterceptorElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Apworks.Config.InterceptorElementCollection.InterceptorElementPropertyName)]
    public partial class InterceptorElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.InterceptorElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptorElementPropertyName = "interceptor";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.InterceptorElementCollection.InterceptorElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.InterceptorElementCollection.InterceptorElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.InterceptorElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.InterceptorElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.InterceptorElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.InterceptorElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptorElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.InterceptorElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Apworks.Config.InterceptorElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorElement this[object name]
        {
            get
            {
                return ((global::Apworks.Config.InterceptorElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.InterceptorElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="interceptor">The <see cref="global::Apworks.Config.InterceptorElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.InterceptorElement interceptor)
        {
            base.BaseAdd(interceptor);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.InterceptorElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="interceptor">The <see cref="global::Apworks.Config.InterceptorElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.InterceptorElement interceptor)
        {
            base.BaseRemove(this.GetElementKey(interceptor));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptorElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.InterceptorElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Apworks.Config.InterceptorElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorElement GetItemByKey(string name)
        {
            return ((global::Apworks.Config.InterceptorElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for the interception.
    /// </summary>
    public partial class InterceptionElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Interceptors Property
        /// <summary>
        /// The XML name of the <see cref="Interceptors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptorsPropertyName = "interceptors";
        
        /// <summary>
        /// Gets or sets the Interceptors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Interceptors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptionElement.InterceptorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.InterceptorElementCollection Interceptors
        {
            get
            {
                return ((global::Apworks.Config.InterceptorElementCollection)(base[global::Apworks.Config.InterceptionElement.InterceptorsPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptionElement.InterceptorsPropertyName] = value;
            }
        }
        #endregion
        
        #region Contracts Property
        /// <summary>
        /// The XML name of the <see cref="Contracts"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ContractsPropertyName = "contracts";
        
        /// <summary>
        /// Gets or sets the Contracts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Contracts.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptionElement.ContractsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.InterceptContractElementCollection Contracts
        {
            get
            {
                return ((global::Apworks.Config.InterceptContractElementCollection)(base[global::Apworks.Config.InterceptionElement.ContractsPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptionElement.ContractsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for interceptor refs.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.InterceptorRefElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Apworks.Config.InterceptorRefElementCollection.InterceptorRefElementPropertyName)]
    public partial class InterceptorRefElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.InterceptorRefElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptorRefElementPropertyName = "interceptorRef";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.InterceptorRefElementCollection.InterceptorRefElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.InterceptorRefElementCollection.InterceptorRefElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.InterceptorRefElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.InterceptorRefElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.InterceptorRefElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.InterceptorRefElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorRefElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorRefElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.InterceptorRefElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorRefElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorRefElement this[object name]
        {
            get
            {
                return ((global::Apworks.Config.InterceptorRefElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.InterceptorRefElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="interceptorRef">The <see cref="global::Apworks.Config.InterceptorRefElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.InterceptorRefElement interceptorRef)
        {
            base.BaseAdd(interceptorRef);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.InterceptorRefElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="interceptorRef">The <see cref="global::Apworks.Config.InterceptorRefElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.InterceptorRefElement interceptorRef)
        {
            base.BaseRemove(this.GetElementKey(interceptorRef));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorRefElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorRefElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.InterceptorRefElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptorRefElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Apworks.Config.InterceptorRefElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptorRefElement GetItemByKey(string name)
        {
            return ((global::Apworks.Config.InterceptorRefElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for intercept method.
    /// </summary>
    public partial class InterceptMethodElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Signature Property
        /// <summary>
        /// The XML name of the <see cref="Signature"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SignaturePropertyName = "signature";
        
        /// <summary>
        /// Gets or sets the Signature.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Signature.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptMethodElement.SignaturePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Signature
        {
            get
            {
                return ((string)(base[global::Apworks.Config.InterceptMethodElement.SignaturePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptMethodElement.SignaturePropertyName] = value;
            }
        }
        #endregion
        
        #region InterceptorRefs Property
        /// <summary>
        /// The XML name of the <see cref="InterceptorRefs"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptorRefsPropertyName = "interceptorRefs";
        
        /// <summary>
        /// Gets or sets the InterceptorRefs.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The InterceptorRefs.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptMethodElement.InterceptorRefsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.InterceptorRefElementCollection InterceptorRefs
        {
            get
            {
                return ((global::Apworks.Config.InterceptorRefElementCollection)(base[global::Apworks.Config.InterceptMethodElement.InterceptorRefsPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptMethodElement.InterceptorRefsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// A collection of InterceptMethodElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.InterceptMethodElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Apworks.Config.InterceptMethodElementCollection.InterceptMethodElementPropertyName)]
    public partial class InterceptMethodElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.InterceptMethodElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptMethodElementPropertyName = "method";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.InterceptMethodElementCollection.InterceptMethodElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.InterceptMethodElementCollection.InterceptMethodElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.InterceptMethodElement)(element)).Signature;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.InterceptMethodElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.InterceptMethodElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.InterceptMethodElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptMethodElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptMethodElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.InterceptMethodElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptMethodElement"/> with the specified key.
        /// </summary>
        /// <param name="signature">The key of the <see cref="global::Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptMethodElement this[object signature]
        {
            get
            {
                return ((global::Apworks.Config.InterceptMethodElement)(base.BaseGet(signature)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.InterceptMethodElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="method">The <see cref="global::Apworks.Config.InterceptMethodElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.InterceptMethodElement method)
        {
            base.BaseAdd(method);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.InterceptMethodElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="method">The <see cref="global::Apworks.Config.InterceptMethodElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.InterceptMethodElement method)
        {
            base.BaseRemove(this.GetElementKey(method));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptMethodElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptMethodElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.InterceptMethodElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptMethodElement"/> with the specified key.
        /// </summary>
        /// <param name="signature">The key of the <see cref="global::Apworks.Config.InterceptMethodElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptMethodElement GetItemByKey(string signature)
        {
            return ((global::Apworks.Config.InterceptMethodElement)(base.BaseGet(((object)(signature)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for intercept contract.
    /// </summary>
    public partial class InterceptContractElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptContractElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Apworks.Config.InterceptContractElement.TypePropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptContractElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Methods Property
        /// <summary>
        /// The XML name of the <see cref="Methods"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MethodsPropertyName = "methods";
        
        /// <summary>
        /// Gets or sets the Methods.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Methods.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Apworks.Config.InterceptContractElement.MethodsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Apworks.Config.InterceptMethodElementCollection Methods
        {
            get
            {
                return ((global::Apworks.Config.InterceptMethodElementCollection)(base[global::Apworks.Config.InterceptContractElement.MethodsPropertyName]));
            }
            set
            {
                base[global::Apworks.Config.InterceptContractElement.MethodsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// Represents the configuration for intercept contracts.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Apworks.Config.InterceptContractElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Apworks.Config.InterceptContractElementCollection.InterceptContractElementPropertyName)]
    public partial class InterceptContractElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Apworks.Config.InterceptContractElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InterceptContractElementPropertyName = "contract";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Apworks.Config.InterceptContractElementCollection.InterceptContractElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Apworks.Config.InterceptContractElementCollection.InterceptContractElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Apworks.Config.InterceptContractElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Apworks.Config.InterceptContractElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Apworks.Config.InterceptContractElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Apworks.Config.InterceptContractElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptContractElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptContractElement this[int index]
        {
            get
            {
                return ((global::Apworks.Config.InterceptContractElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptContractElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptContractElement this[object type]
        {
            get
            {
                return ((global::Apworks.Config.InterceptContractElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Apworks.Config.InterceptContractElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="contract">The <see cref="global::Apworks.Config.InterceptContractElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Apworks.Config.InterceptContractElement contract)
        {
            base.BaseAdd(contract);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Apworks.Config.InterceptContractElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="contract">The <see cref="global::Apworks.Config.InterceptContractElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Apworks.Config.InterceptContractElement contract)
        {
            base.BaseRemove(this.GetElementKey(contract));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptContractElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptContractElement GetItemAt(int index)
        {
            return ((global::Apworks.Config.InterceptContractElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Apworks.Config.InterceptContractElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::Apworks.Config.InterceptContractElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Apworks.Config.InterceptContractElement GetItemByKey(string type)
        {
            return ((global::Apworks.Config.InterceptContractElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// HandlerKind.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum HandlerKind
    {
        
        /// <summary>
        /// Command.
        /// </summary>
        Command,
        
        /// <summary>
        /// Event.
        /// </summary>
        Event,
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// HandlerSourceType.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum HandlerSourceType
    {
        
        /// <summary>
        /// Type.
        /// </summary>
        Type,
        
        /// <summary>
        /// Assembly.
        /// </summary>
        Assembly,
    }
}
namespace Apworks.Config
{
    
    
    /// <summary>
    /// ExceptionHandlingBehavior.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum ExceptionHandlingBehavior
    {
        
        /// <summary>
        /// Direct.
        /// </summary>
        Direct,
        
        /// <summary>
        /// Forward.
        /// </summary>
        Forward,
    }
}
